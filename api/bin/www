#!/usr/bin/env node

/**
 * Module dependencies.
 */
const debug = require('debug')('api:server');
const https = require('https');
const FS = require("fs");
const Path = require('path');
const io = require('socket.io');

const {RabbitMQWrapper} = require('../routes/res/rabbitMQ')
const {PKIUtils} = require('../routes/res/pki');
const {initialiserApp} = require('../app');
const {WebSocketApp} = require('../websocketsapp');
const {SessionManagement} = require('../routes/res/sessionManagement');

// const Spdy = require('spdy');
// const http2 = require('http2');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '443');
const hostIp = process.env.HOST;
const key_path = process.env.PRIVKEY;
const cert_path = process.env.CERT;

/**
 * Create SPDY/http2 server.
 */
const config = {
    hostIp: hostIp,
    cert: FS.readFileSync(cert_path),
    key: FS.readFileSync(key_path)
};

// Charger certificats, PKI
const certs = {
  millegrille: process.env.MG_MQ_CAFILE,
  certFile: process.env.MG_MQ_CERTFILE,
  keyFile: process.env.MG_MQ_KEYFILE,
};
const pki = new PKIUtils(certs);

// Connexion a RabbitMQ
// amqps://mq:5673/[idmg]
const rabbitMQ = new RabbitMQWrapper(pki);
const mqConnectionUrl = process.env.MG_MQ_URL;
rabbitMQ.connect(mqConnectionUrl);

// Demarrer gestion de sessions websockets
const sessionManagement = new SessionManagement(rabbitMQ, pki);
sessionManagement.start();

// Creer application CoupDOeil
const app = initialiserApp(rabbitMQ, pki, sessionManagement);
const webSocketApp = new WebSocketApp(rabbitMQ, pki, sessionManagement);

/*
 * Creer un serveur pour https et WSS (socket.io)
 */
const wss_server = io();
const server = https.createServer(config, app).listen(port, () => {
  wss_server.listen(server);
  wss_server.on('connection', (socket) => {
    console.info("Connexion WSS id: " + socket.id + ", remoteAddress: " + socket.conn.remoteAddress);
    webSocketApp.addSocket(socket);
  });

  console.info('Server is listening at https://localhost:' + port + '. Ctrl^C to stop it.');
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
