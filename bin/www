#!/usr/bin/env node
const debug = require('debug')('millegrilles:coupdoeil:www')
const express = require('express')
const session = require('express-session')
const MemoryStore = require('memorystore')(session)
const socketioSession = require('express-socket.io-session')

const socketApp = require('../models/appSocketIo')
const amqpdao = require('../models/amqpdao')
// const {initialiser: initialiserServer} = require('@dugrema/millegrilles.common/lib/server3')
const server4 = require('@dugrema/millegrilles.common/lib/server4')
const {initialiser: initialiserCoupdoeil} = require('../routes/coupdoeil')
const { extraireExtensionsMillegrille } = require('@dugrema/millegrilles.common/lib/forgecommon')
// const { GrosFichiersDao } = require('../models/grosFichiersDao')

async function init() {

  // Initialiser server et routes
  const app = express()
  const {server, socketIo, amqpdao: amqpdaoInst} = await server4(
    app, socketApp.configurerEvenements, {pathApp: '/coupdoeil', verifierAutorisation})

  // const grosFichiersDao = new GrosFichiersDao(amqpdaoInst)
  // socketIo.use((socket, next)=>{
  //   socket.grosFichiersDao = grosFichiersDao
  //   next()
  // })

  const routeCoupdoeil = express.Router()
  app.use('/coupdoeil', routeCoupdoeil)

  // // Inserer les routes apres l'initialisation, permet d'avoir le middleware
  // // attache avant (app.use comme le logging morgan, injection amqpdao, etc.)
  // routeGrosfichiers.use((req, res, next)=>{
  //   req.grosFichiersDao = grosFichiersDao
  //   next()
  // })

  routeCoupdoeil.use(initialiserCoupdoeil(amqpdaoInst))

}

function verifierAutorisation(socket, securite, certificatForge) {
  debug("Verifier autorisation cert %O", certificatForge)
  if(securite === '3.protege') {
    const extensions = extraireExtensionsMillegrille(certificatForge)
    debug("www.verifierAutorisation extensions %O", extensions)

    // Deleguation globale donne tous les acces
    if(['proprietaire', 'delegue'].includes(extensions.delegationGlobale)) {
      debug("Usager proprietaire, acces 3.protege OK")
      return true
    }

    // Delegation au domaine coupdoeil
    if(extensions.delegationsDomaines.includes('coupdoeil')) {
      debug("Usager delegue domaine coupdoeil, acces 3.protege OK")
      return true
    }

    debug("Usager acces 3.protege refuse")
  }
  return false
}

init()
